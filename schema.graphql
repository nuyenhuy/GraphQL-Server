# -----------------------------------------------
# !!! THIS FILE WAS GENERATED BY TYPE-GRAPHQL !!!
# !!!   DO NOT MODIFY THIS FILE BY YOURSELF   !!!
# -----------------------------------------------

type AdjCustomer {
  address: String!
  createAt: DateTimeISO!
  customerId: String!
  email: String!
  id: ID!
  isMerge: Boolean!
  name: String!
  phone: String!
}

input AdjCustomerInput {
  address: String!
  createAt: DateTimeISO!
  customerId: String!
  email: String!
  isMerge: Boolean!
  name: String!
  phone: String!
}

type Artist {
  bio: String!
  events: [Event!]!
  id: ID!
  imageUrl: String!
  name: String!
}

type Booking {
  bookingDate: DateTimeISO!
  event: Event!
  eventId: Int!
  id: ID!
  price: Float!
  tickets: [Ticket!]!
  userId: Int!
}

input BookingInput {
  eventId: Int!
  seats: [Int!]!
}

"""
A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the `date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.This scalar is serialized to a string in ISO 8601 format and parsed from a string in ISO 8601 format.
"""
scalar DateTimeISO

type DimCustomer {
  address: String!
  customerId: String!
  email: String!
  id: ID!
  isCurrent: Boolean!
  name: String!
  phone: String!
  validEnd: DateTimeISO
  validStart: DateTimeISO!
}

input DimCustomerInput {
  address: String!
  customerId: String!
  email: String!
  isCurrent: Boolean!
  name: String!
  phone: String!
  validEnd: DateTimeISO!
  validStart: DateTimeISO!
}

type Event {
  artists: [Artist!]!
  category: String!
  description: String!
  eventDate: DateTimeISO!
  id: ID!
  imageUrl: String!
  name: String!
  venue: Venue!
  venueId: Int!
}

input EventInput {
  artistIds: [Int!]!
  category: String!
  description: String!
  eventDate: String!
  imageUrl: String
  name: String!
  venueId: Int!
}

type EventSeatAvailability {
  eventId: Int!
  seatNos: [Int!]!
  seatsAvailable: Int!
}

input LoginInput {
  email: String!
  password: String!
}

type LoginToken {
  accessToken: String!
  refreshToken: String!
}

type Mutation {
  createAdjCustomer(adjCustomerInput: AdjCustomerInput!): AdjCustomer!
  createBooking(bookingInput: BookingInput!): Booking!
  createDimCustomer(dimCustomerInput: DimCustomerInput!): DimCustomer!
  createEvent(eventInput: EventInput!): Event!
  createTable(tableInput: TableInput!): Table!
  createUser(userInput: UserInput!): User!
  createVenue(venueInput: VenueInput!): Venue!
  login(loginInput: LoginInput!): LoginToken!
  refreshToken(refreshToken: String!): String!
  uploadAdjCustomerExcel(file: Upload!): String!
}

type Query {
  adjCustomer(id: ID!): AdjCustomer!
  adjCustomers: [AdjCustomer!]!
  allBookings: [Booking!]!
  artists: [Artist!]!
  bookings(eventId: Float!): [Booking!]!
  dimCustomer(id: ID!): DimCustomer!
  dimCustomers: [DimCustomer!]!
  event(id: ID!): Event!
  eventSeatAvailability(eventId: Float!): EventSeatAvailability!
  events: [Event!]!
  exportExcel(fromDate: String, tableName: String, toDate: String): String!
  exportPDF(fromDate: String, tableName: String, toDate: String): String!
  table(id: ID!): Table!
  tables: [Table!]!
  users: [User!]!
  venue(id: ID!): Venue!
  venues: [Venue!]!
}

type Table {
  description: String!
  id: ID!
  tableName: String!
}

input TableInput {
  description: String!
  tableName: String!
}

type Ticket {
  booking: Booking!
  bookingId: Int!
  id: ID!
  seatNo: Int!
}

"""The `Upload` scalar type represents a file upload."""
scalar Upload

type User {
  email: String!
  id: ID!
  name: String!
  password: String!
  role: String!
}

input UserInput {
  email: String!
  name: String!
  password: String!
  role: String
}

type Venue {
  address: String!
  capacity: Int!
  events: [Event!]!
  id: ID!
  location: String!
  name: String!
  weather: Weather!
}

input VenueInput {
  address: String!
  capacity: Float!
  location: String!
  name: String!
}

type Weather {
  description: String!
  feels_like: Float!
  humidity: Float!
  icon: String!
  main: String!
  temp: Float!
  temp_max: Float!
  temp_min: Float!
  windSpeed: String!
}